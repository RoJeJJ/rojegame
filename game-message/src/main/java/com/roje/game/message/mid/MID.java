// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action.proto

package com.roje.game.message.mid;

/**
 * Protobuf enum {@code MID}
 */
public enum MID
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>snap = 0;</code>
   */
  snap(0),
  /**
   * <code>ServerRegReq = 1001;</code>
   */
  ServerRegReq(1001),
  /**
   * <code>ServerRegRes = 1002;</code>
   */
  ServerRegRes(1002),
  /**
   * <code>ServerUpdateReq = 1003;</code>
   */
  ServerUpdateReq(1003),
  /**
   * <code>ServerUpdateRes = 1004;</code>
   */
  ServerUpdateRes(1004),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>snap = 0;</code>
   */
  public static final int snap_VALUE = 0;
  /**
   * <code>ServerRegReq = 1001;</code>
   */
  public static final int ServerRegReq_VALUE = 1001;
  /**
   * <code>ServerRegRes = 1002;</code>
   */
  public static final int ServerRegRes_VALUE = 1002;
  /**
   * <code>ServerUpdateReq = 1003;</code>
   */
  public static final int ServerUpdateReq_VALUE = 1003;
  /**
   * <code>ServerUpdateRes = 1004;</code>
   */
  public static final int ServerUpdateRes_VALUE = 1004;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static MID valueOf(int value) {
    return forNumber(value);
  }

  public static MID forNumber(int value) {
    switch (value) {
      case 0: return snap;
      case 1001: return ServerRegReq;
      case 1002: return ServerRegRes;
      case 1003: return ServerUpdateReq;
      case 1004: return ServerUpdateRes;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<MID>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      MID> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<MID>() {
          public MID findValueByNumber(int number) {
            return MID.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.roje.game.message.mid.MIDOuterClass.getDescriptor().getEnumTypes().get(0);
  }

  private static final MID[] VALUES = values();

  public static MID valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private MID(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:MID)
}

